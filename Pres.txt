Dans cette deuxiÃ¨me partie, je vous ai prÃ©sentÃ© le nouveau processus automatisÃ© que nous avons mis en place.

DÃ©sormais, dÃ¨s quâ€™un dÃ©veloppeur pousse son code sur le dÃ©pÃ´t Git, une pipeline GitLab CI/CD se dÃ©clenche automatiquement.
Elle exÃ©cute dâ€™abord les tests de non-rÃ©gression sur lâ€™environnement de dÃ©veloppement (DEV),
puis lance des tests avec lâ€™outil Molecule afin de valider :
	â€¢	le bon fonctionnement du code via des tests unitaires,
	â€¢	ainsi que le bon comportement global des rÃ´les Ansible grÃ¢ce Ã  des tests dâ€™intÃ©gration.

Si tous les tests sont concluants, une merge request est automatiquement crÃ©Ã©e vers la branche prÃ©prod.
Une nouvelle pipeline sâ€™exÃ©cute alors, avec les mÃªmes Ã©tapes de validation :
	â€¢	tests de non-rÃ©gression,
	â€¢	tests unitaires et dâ€™intÃ©gration avec Molecule.

Une fois la pipeline validÃ©e, lâ€™intÃ©grateur peut lancer manuellement la mise en production.

En cas dâ€™erreur, le dÃ©veloppeur est immÃ©diatement notifiÃ©, ce qui permet de corriger rapidement sans attendre de retours manuels.

ğŸ‘‰ GrÃ¢ce Ã  cette automatisation, nous avons :
	â€¢	fiabilisÃ© nos tests,
	â€¢	rÃ©duit les erreurs humaines,
	â€¢	et considÃ©rablement accÃ©lÃ©rÃ© le cycle de correction dâ€™incidents.

Ce processus nous permet dâ€™aller plus vite, avec plus de sÃ©curitÃ©, et moins dâ€™efforts manuels.
